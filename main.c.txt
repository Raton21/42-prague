/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rtonar <rtonar@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/10/24 20:23:02 by rtonar            #+#    #+#             */
/*   Updated: 2023/10/31 17:04:52 by rtonar           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <stdio.h>
#include <string.h>
#include <ctype.h>
int	main(int argc, char const *argv[])
{
	if (argc == 1)
	{
		printf("wrong amount of inputs");
		return (1);
	}
	if (!strcmp(argv[1],"ft_isalpha.c"))
		printf("Testing ft_isalpha, input:\t%s\n Output:\t\t\t%d\n",argv[2],ft_isalpha(*argv[2]));
	else if (!strcmp(argv[1],"ft_isdigit.c"))
		printf("Testing ft_isdigit, input:\t%s\n Output:\t\t\t%d\n",argv[2],ft_isdigit(*argv[2]));
	else if (!strcmp(argv[1],"ft_isalnum.c"))
		printf("Testing ft_isalnum, input:\t%s\n Output:\t\t\t%d\n",argv[2],ft_isalnum(*argv[2]));
	else if (!strcmp(argv[1],"ft_isascii.c"))
		printf("Testing ft_isascii, input:\t%s\n Output:\t\t\t%d\n",argv[2],ft_isascii(*argv[2]));
	else if (!strcmp(argv[1],"ft_isprint.c"))
		printf("Testing ft_isprint, input:\t%s\n Output:\t\t\t%d\n",argv[2],ft_isprint(*argv[2]));
	else if (!strcmp(argv[1],"ft_strlen.c"))
		printf("Testing ft_strlen, input:\t%s\n Output:\t\t\t%d\n",argv[2],ft_strlen(argv[2]));
	else if (!strcmp(argv[1],"ft_memset.c"))
	{
		char str[50];
		strncpy(str, argv[2], sizeof(str));
		printf("Testing ft_memset, input:\t%s\n",str);
		ft_memset(str, *argv[3], atoi(argv[4]));
		printf("Output:\t\t\t%s\n",str);
	}
	else if (!strcmp(argv[1],"ft_bzero.c"))
	{
		char str[50];
		strncpy(str, argv[2], sizeof(str));
		printf("Testing ft_bzero, input:\t%s\n",str);
		ft_bzero(str, atoi(argv[3]));
		printf("Output:\t\t\t%s\n",str);
	}
	else if (!strcmp(argv[1],"ft_memcpy.c"))
	{
		char *src = (char*)argv[2];
    	int num_chars = atoi(argv[3]);
		char dest[num_chars + 1];
		ft_memcpy(dest, src, num_chars);
		printf("Testing ft_memcpy, input:\t%s\nDuplicate:\t\t\t%s\n",argv[2],dest);
	}
	else if (!strcmp(argv[1],"ft_memmove.c"))
	{
		int n = atoi(argv[3]);
		char dest[n + 1];
		ft_memmove(dest, argv[2], n);
		dest[n] = '\0';
		printf("Testing ft_memmove, input:\t%s\nDestination:\t\t\t%s\n",argv[2],dest);
	}
	else if (!strcmp(argv[1],"ft_strlcpy.c"))
	{
		int n = atoi(argv[3]);
		char dest[n + 1];
		ft_strlcpy(dest, argv[2], n + 1);
		printf("Testing ft_strlcpy, input:\t%s\nDestination:\t\t\t%s\n",argv[2],dest);
	}
	else if (!strcmp(argv[1],"ft_strlcat.c"))
	{
		int n = atoi(argv[4]);
		char dest[n + 1];
		ft_strlcpy(dest, argv[2], n + 1);
		ft_strlcat(dest, argv[3], n + 1);
		printf("Testing ft_strlcat, inputs:\t%s and %s \nDestination:\t\t\t%s\n",argv[2],argv[3],dest);
	}
	else if (!strcmp(argv[1],"ft_tolower.c"))
		printf("Testing ft_tolower, input:\t%s\n Output:\t\t\t%c\n",argv[2],ft_tolower(*argv[2]));
	else if (!strcmp(argv[1],"ft_toupper.c"))
		printf("Testing ft_toupper, input:\t%s\n Output:\t\t\t%c\n",argv[2],ft_toupper(*argv[2]));
	else if (!strcmp(argv[1],"ft_strchr.c"))
	{
	printf("Testing ft_strchr, input:\t%s\n",argv[2]);
		const char *str = argv[2];
		char ch = argv[3][0];
		char *result =  ft_strchr(str, ch);
		if (result != NULL) {
			printf("Character %c found at position %ld.\n", ch, result - str + 1);
		} else {
			printf("Character not found in the string.\n");
		}
	}
	else if (!strcmp(argv[1],"ft_strrchr.c"))
	{
	printf("Testing strrchr, input:\t%s\n",argv[2]);
		const char *str = argv[2];
		char ch = argv[3][0];
		char *result =  ft_strrchr(str, ch);
		if (result != NULL) {
			printf("Character %c found at position %ld.\n", ch, result - str + 1);
		} else {
			printf("Character not found in the string.\n");
		}
	}
	else if (!strcmp(argv[1],"ft_strncmp.c"))
		printf("Testing ft_strncmp, input strings:\t%s and %s\n Output:\t\t\t%d\n",argv[2], argv[3],ft_strncmp(argv[2], argv[3], atoi(argv[4]))); 
	else if (!strcmp(argv[1],"ft_memchr.c"))
		printf("ft_memchr not yet implemented\n");
	else if (!strcmp(argv[1],"ft_memcmp.c"))
		printf("ft_memcmpnot yet implemented\n");	
	else if (!strcmp(argv[1],"ft_strnstr.c"))
	{
	char *result = ft_strnstr(argv[2], argv[3], atoi(argv[4]));
	if (result != NULL) {
		printf("Substring found at position %ld. string: %s\n", result - argv[2], result);
	} else {
		printf("Substring not found in the haystack.\n");
	}
	}
	else if (!strcmp(argv[1],"ft_atoi.c"))
		printf("Testing ft_atoi, input string:\t%s\nOutput number:\t\t\t%d\n",argv[2], ft_atoi(argv[2])); 
	// aditional functions:
	else if (!strcmp(argv[1],"ft_calloc.c"))
	{
	int num_elements = atoi(argv[2]);
	int size_of_each_element = atoi(argv[3]);
	printf("Testing ft_calloc with %d elements of %d size\n",num_elements , size_of_each_element); 
	int *ptr = calloc(num_elements, size_of_each_element);
	if(ptr == NULL) {
		printf("Memory allocation failed\n");
		return 1;
	}
	printf("Memory allocation successful. Values:\n");
	for(int i = 0; i < num_elements; i++) {
		printf("%d ", ptr[i]);
	}
	printf("\n");
	free(ptr);
	}

	else if (!strcmp(argv[1],"ft_strdup.c"))
	{
	char *dup_str = ft_strdup(argv[2]);
	if(dup_str == NULL) {
		printf("Memory allocation failed\n");
		return 1;
	}
	printf("Testing ft_strdup, input string:\t%s\nDuped string:\t\t\t\t%s\n",argv[2],dup_str); 
	free(dup_str);
	}
	else if (!strcmp(argv[1],"ft_substr.c"))
	{
	char *output = ft_substr(argv[2], atoi(argv[3]), atoi(argv[4]));
	printf("Testing ft_substr, input string:\t%s\nOutput string:\t\t\t\t%s\n",argv[2],output); 
	free(output);
	}
	else if (!strcmp(argv[1],"ft_strjoin.c"))
	{
	char *output = ft_strjoin(argv[2], argv[3]);
	printf("Testing ft_strjoin, input strings:\t%s and %s\nOutput string:\t\t\t\t%s\n",argv[2],argv[3],output); 
	free(output);
	return 0;
	}
	else if (!strcmp(argv[1],"ft_strtrim.c"))
	{
	char *output = ft_strtrim(argv[2], argv[3]);
	printf("Testing ft_strjoin, input string:\t%s trim: %s\nOutput string:\t\t\t\t%s\n",argv[2],argv[3],output); 
	free(output);
	}
	else if (!strcmp(argv[1],"ft_split.c"))
	{
	char **tokens = ft_split(argv[2], *argv[3]);
	printf("Testing ft_split, input string:\t%s splitted by: %c\n",argv[2],*argv[3]); 
    if (tokens) {
        for (int i = 0; tokens[i] != NULL; i++) {
            printf("%s\n", tokens[i]);
            free(tokens[i]);
        }
        free(tokens);
    } else {
        printf("Allocation failed.\n");
    }
	return 0;
	}
	else if (!strcmp(argv[1],"ft_itoa.c"))
	{
	char *output = ft_itoa(atoi(argv[2]));
	printf("Testing ft_itoa, input number:\t%d \nOutput string:\t\t\t%s\n",atoi(argv[2]),output); 
	free(output);
	}
	else if (!strcmp(argv[1],"ft_strmapi.c"))
		printf("ft_memchr not yet implemented\n");
	else if (!strcmp(argv[1],"ft_striteri.c"))
		printf("ft_memchr not yet implemented\n");
	else if (!strcmp(argv[1],"ft_putchar_fd.c"))
		ft_putchar_fd(*argv[2], 1);
	else if (!strcmp(argv[1],"ft_putstr_fd.c"))
		ft_putstr_fd((char*)argv[2], 1);
	else if (!strcmp(argv[1],"ft_putendl_fd.c"))
		ft_putendl_fd((char*)argv[2], 1);
	else if (!strcmp(argv[1],"ft_putnbr_fd.c"))
		ft_putnbr_fd(atoi(argv[2]), 1);	
	else
		printf("Function name inputed incorectly. use the name with \"ft_\" before and \".c\" after it.\n");
	return (0);
}




/* int main() {
    char str[] = "Hello, World!";
    char str2[50];
    char *str3;
    int len = strlen(str);
    
    printf("Testing functions with string: %s\n", str);
    
    // Testing isalpha
    printf("isalpha('H'): %d\n", isalpha('H'));
    printf("ft_isalpha('H'): %d\n", ft_isalpha('H'));
    
    // Testing isdigit
    printf("isdigit('2'): %d\n", isdigit('2'));
    printf("ft_isdigit('2'): %d\n", ft_isdigit('2'));
    
    // Testing isalnum
    printf("isalnum('H'): %d\n", isalnum('H'));
    printf("ft_isalnum('H'): %d\n", ft_isalnum('H'));
    
    // Testing isascii
    printf("isascii('H'): %d\n", isascii('H'));
    printf("ft_isascii('H'): %d\n", ft_isascii('H'));
    
    // Testing isprint
    printf("isprint('H'): %d\n", isprint('H'));
    printf("ft_isprint('H'): %d\n", ft_isprint('H'));
    
    // Testing strlen
    printf("strlen(str): %d\n", len);
    printf("ft_strlen(str): %d\n", ft_strlen(str));
    
    // Testing memset
    memset(str2, '\0', sizeof(str2));
    strncpy(str2, str, sizeof(str2) - 1);
    printf("memset(str2, '\\0', sizeof(str2)): %s\n", str2);
    
    // Testing memcpy
    memcpy(str2, str, len + 1);
    printf("memcpy(str2, str, len + 1): %s\n", str2);
    
    // Testing memmove
    memmove(str2 + 5, str2 + 4, len - 4 + 1);
    printf("memmove(str2 + 5, str2 + 4, len - 4 + 1): %s\n", str2);
    
     // Testing toupper
     printf("toupper('h'): %c\n", toupper('h'));
     printf("ft_toupper('h'): %c\n", ft_toupper('h'));
     
     // Testing tolower
     printf("tolower('H'): %c\n", tolower('H'));
     printf("ft_tolower('H'): %c\n", ft_tolower('H'));
     
     // Testing strchr
     printf("strchr(str, 'o'): %s\n", strchr(str, 'o'));
     printf("ft_strchr(str, 'o'): %s\n", ft_strchr(str, 'o'));
     
     // Testing strrchr
     printf("strrchr(str, 'o'): %s\n", strrchr(str, 'o'));
     printf("ft_strrchr(str, 'o'): %s\n", ft_strrchr(str, 'o'));
     
     // Testing strncmp
     printf("strncmp(\"Hello\", \"Hello\", 5): %d\n", strncmp("Hello", "Hello", 5));
     printf("ft_strncmp(\"Hello\", \"Hello\", 5): %d\n", ft_strncmp("Hello", "Hello", 5));
     
     // Testing memchr
     printf("memchr(str, 'o', len): %s\n", (char *) memchr(str, 'o', len));
     printf("ft_memchr(str, 'o', len): %s\n", (char *) ft_memchr(str, 'o', len));
     
     // Testing memcmp
     printf("memcmp(\"Hello\", \"hello\", 5): %d\n", memcmp("Hello", "hello", 5));
     printf("ft_memcmp(\"Hello\", \"hello\", 5): %d\n", ft_memcmp("Hello", "hello", 5));
     
      // Testing atoi
      printf("atoi(\"123\"): %d\n", atoi("123"));
      printf("ft_atoi(\"123\"): %d\n", ft_atoi("123"));
      
      // Testing calloc and strdup
      str3 = (char *) calloc(len + 1, sizeof(char));
      if (str3 != NULL) {
          str3 = strdup(str);
          if (str3 != NULL) {
              printf("strdup(str): %s\n", str3);
          }
          free(str3);
      }
      
      str3 = (char *) ft_calloc(len + 1, sizeof(char));
      if (str3 != NULL) {
          str3 = ft_strdup(str);
          if (str3 != NULL) {
              printf("ft_strdup(str): %s\n", str3);
          }
          free(str3);
      }
      
      return 0;
} */

